 #!/bin/bash
# prototype backend interpreter for the Runestone Backend (RSBE) system
# RAB 10/2020 (version 1) Demo on 10/20/20
# further development May 2023
PROG=`basename $0`
USAGE="Usage:  $PROG workdir [ infile ] 
where workdir is an existing subdirectory for performing the computation
      infile (default standard input), a file in workdir has this format:  
	sta
	jobname [count filename [build-command ...]]
	[exec-command...]
	[code]
where the characters beginning with sta represent standard input.
    sta  is a code specifying the architecture that $PROG should use
        options are:  omp (multicore), mpi,mpi4py (cluster), gpu (CUDA,OpenACC)
    jobname  names the job being acted on - typically the same as workdir
    count, filename  are length of code and filename to store  code  into
	If count is 0 or empty then ignore (dummy) filename and assume no code 
    build-command  is a shell command to compile or otherwise prepare filename
    exec-command  is shell command for executing the job (blank line = no exec)
    code  is the contents for filename, consisting of count bytes"

cd $1 || { 
    echo "$PROG: could not change to subdirectory '$1', aborting"
    exit 1
}

cat $2 | {

read BACKEND ; test "$BACKEND" = "" && read BACKEND

case "$BACKEND" in
    gpu) read JOBNAME COUNT FILENAME BUILD;; 
    omp) read JOBNAME NCORES COUNT FILENAME BUILD;; 
    mpi|mpi4py) read JOBNAME NHOSTS NCORES COUNT FILENAME BUILD;;
    *) echo "$PROG: first line is '$BACKEND'"
       echo "Unrecognized backend value, aborting"
       exit 1;;
esac

test -z "$JOBNAME" && { echo "$USAGE" ; exit 1 ; }
read EXEC

#test -d $JOBNAME || mkdir -p $JOBNAME || {
#    echo "$PROG: could not create subdirectory $JOBNAME, aborting"
#    exit 1
#}
#cd $JOBNAME || { 
#    echo "$PROG: could not change to subdirectory $JOBNAME, aborting"
#    exit 1
#}

case "$COUNT" in 
    ""|0) ;;
    [1-9]*) echo "$COUNT" | grep -q '^[0-9]*$' || {
	        echo "$PROG $JOBNAME: count must be an unsigned integer"
		echo "$USAGE" 
		exit 1; }
	    test -z "$FILENAME" && {
		echo "$PROG $JOBNAME: missing filename"
		echo "$USAGE" 
		exit 1; }
	    dd bs=1 count=$COUNT of="$FILENAME" status=none || {
		echo "$PROG $JOBNAME: couldn't read $COUNT bytes of $FILENAME"
		echo "$USAGE" 
		exit 1; } ;;
    *) echo "count='$COUNT' filename='$FILENAME'" ; echo "$USAGE" ; exit 1;;
esac
# any code is consumed from stdin and stored in filename

if test -n "$BUILD"
then 
    eval $BUILD || {
	echo "$PROG: attempt to build failed: $BUILD"
	echo "Contents of subdirectory # $JOBNAME:"
	ls -l
	exit 1
    }
fi

if test -n "$EXEC"
then 
    exec $EXEC
    # if we reach this line, then exec failed
    echo "$PROG: execution attempt failed:  $EXEC"
    echo "Contents of subdirectory # $JOBNAME:"
    ls -l
    exit 1
fi

exit 0

}
